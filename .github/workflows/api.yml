name: Docker Image CI

on:
  push:
    branches: [ "main" ]

env:
  ECR_REGISTRY: public.ecr.aws
  ECR_REPOSITORY: techchallenge2
  EKS_CLUSTER_NAME: module-eks-SkNJI
  AWS_REGION: us-east-1

jobs:
  docker_hub:
    name: Build and Publish Image to Docker Hub
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository 
      uses: actions/checkout@v2
      
    - name: Docker login
      uses: docker/login-action@v3.1.0
      with:
        username: ${{ secrets.docker_user }}
        password: ${{ secrets.docker_senha }}
   
    - name: Build and Push Docker images
      uses: docker/build-push-action@v5.0.0
      with:
        context: lanche-rapido/src/Dockerfile
        tags: 'cesarmoroni1/teste:latest'
        push: true


  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0'

    - name: Restore dependencies
      working-directory: ./lanche-rapido/src
      run: dotnet restore

    - name: Build
      working-directory: ./lanche-rapido/src
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      working-directory: ./lanche-rapido/src
      run: dotnet test --no-restore --verbosity normal

    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2
    


  
    
    
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

  


    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_TAG: "latest"
        
      working-directory: ./lanche-rapido/src
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/c6y4l3f3
        docker build -t $ECR_REGISTRY/c6y4l3f3/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
        docker push public.ecr.aws/c6y4l3f3/techchallenge2:latest

    - name: Install kubectl
      run: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Update kube config
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
        kubectl config get-contexts
        kubectl config use-context $EKS_CLUSTER_NAME

    - name: Debug kubeconfig
      run: cat ~/.kube/config

    - name: Deploy to EKS
      env:
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      working-directory: ./lanche-rapido
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/c6y4l3f3
        sed -i.bak "s|DOCKER_IMAGE|public.ecr.aws/c6y4l3f3/techchallenge2:$IMAGE_TAG|g" manifests/lanche-rapido-deployment.yaml && \
        kubectl apply -f manifests/lanche-rapido-deployment.yaml --validate=false
        kubectl apply -f manifests/lanche-rapido-svc.yaml --validate=false
        kubectl apply -f manifests/lanche-rapido-hpa.yaml --validate=false
        kubectl get pods
        kubectl get svc

